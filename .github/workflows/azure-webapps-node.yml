name: Process IPs and Commit JP Results

on:
  workflow_dispatch:
  schedule:
    - cron: '00 00 * * *'

jobs:
  process-ips:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 提交权限
      actions: read
      id-token: write

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Download the ZIP file
      - name: Download ZIP file
        run: wget -O ips.zip https://zip.baipiao.eu.org

      # Step 3: Unzip the file
      - name: Unzip the downloaded file
        run: unzip ips.zip -d extracted

      # Step 4: Merge all TXT files into one
      - name: Merge TXT files
        run: cat extracted/*.txt > merged_ips.txt

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
    
      # Step 5: Filter JP IPs
      - name: Filter JP IPs using JavaScript
        run: |
          # 创建并运行 JavaScript 脚本
          node <<EOF
          const axios = require('axios');
          const fs = require('fs');

          // 创建一个写入 JP IP 的文件流
          const jpIpsStream = fs.createWriteStream('jp_ips.txt', { flags: 'a' });

          // 读取文件并处理每个 IP
          const ips = fs.readFileSync('merged_ips.txt', 'utf-8').split('\n').filter(ip => ip.trim() !== '');

          async function getGeo(ip) {
            try {
              const response = await axios.get(\`https://api.ip.sb/geoip/\${ip}\`);
              return response.data;
            } catch (error) {
              console.error(\`Failed to get geo information for \${ip}\`);
              return null;
            }
          }

          (async function processIps() {
          for (const ip of ips) {
            const geoData = await getGeo(ip);
            
            if (geoData) {
              const geo = geoData.country_code;
              if (geo === 'JP') {
                jpIpsStream.write(\`\${ip}\n\`);
                console.log(\`\${ip} - \${geo}\`);
              } else {
                console.log(\`\${ip} - \${geo}\`);
              }
            } else {
              console.log(\`\${ip} - ERROR: Invalid response\`);
            }
            
            // 延迟 1 秒
            await new Promise(resolve => setTimeout(resolve, 1000));
          }

          // 关闭文件流
          jpIpsStream.end();
          })();
          EOF

      # Step 6: Check connectivity for JP IPs
      - name: Ping JP IPs
        run: |
          while read -r ip; do
            if ping -c 1 -W 1 "$ip" &> /dev/null; then
              latency=$(ping -c 3 "$ip" | tail -1 | awk -F '/' '{print $5}') # 平均延迟(ms)
              if [ -n "$latency" ]; then
                echo "$ip, $latency ms" >> ping_jp.txt
              fi
            else
              echo "$ip 无延迟"
            fi
          done < jp_ips.txt

      # Step 7: Commit and push results
      - name: Commit and push results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add ping_jp.txt
          git commit -m "Add valid JP IPs with latency results"
          git push
